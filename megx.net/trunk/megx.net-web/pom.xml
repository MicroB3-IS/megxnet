<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <parent>
    <groupId>net.megx</groupId>
    <artifactId>parent-microb3-is</artifactId>
    <version>1.0.0-SNAPSHOT</version>
  </parent>

  <artifactId>megx.net-web</artifactId>
  <version>1.0.1-SNAPSHOT</version>
  <!-- version given by parent pom -->
  <packaging>war</packaging>


  <name>MB3-IS web application</name>
  <url>http://mb3is.megx.net</url>

  <properties>
    <mvn.megx.version>0.4</mvn.megx.version>
    <plugin.config.dir>config</plugin.config.dir>

    <mvn.host.name>localhost</mvn.host.name>
    <mvn.host.port>${mvn.tomcat.port}</mvn.host.port>
    <mvn.site.url>http://${mvn.host.name}:${mvn.host.port}/</mvn.site.url>
    <mvn.megx.war.file.name>megx.net</mvn.megx.war.file.name>
  <!-- just to skip ant bundle copying, cause this project does not deploy   any bundle -->
    <mvn.ant.target.copy-single-bundle.skip>true</mvn.ant.target.copy-single-bundle.skip>
  </properties>



  <repositories>
    <repository>
      <snapshots>
        <enabled>false</enabled>
      </snapshots>
      <id>central</id>
      <name>Maven Repository Switchboard</name>
      <url>http://repo1.maven.org/maven2</url>
      <releases>
        <updatePolicy>never</updatePolicy>
      </releases>
    </repository>
    <repository>
      <id>nexus</id>
      <name>Nexus Sonatype Releases</name>
      <url>https://oss.sonatype.org/content/repositories/releases</url>
    </repository>
  </repositories>

  <dependencies>
    <dependency>
      <groupId>com.choncms</groupId>
      <artifactId>choncms.starter</artifactId>
      <version>1.4</version>
    </dependency>

    <dependency>
      <groupId>postgresql</groupId>
      <artifactId>postgresql</artifactId>
    </dependency>
    
    <dependency>
      <groupId>org.atmosphere</groupId>
      <artifactId>atmosphere-runtime</artifactId>
    </dependency>
    
    <dependency>
      <groupId>org.atmosphere</groupId>
      <artifactId>wasync</artifactId>
    </dependency>
    
    <dependency>
      <groupId>org.slf4j</groupId>
      <artifactId>slf4j-api</artifactId>
    </dependency>
    
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
    </dependency>
  </dependencies>

  <build>

    <defaultGoal>verify</defaultGoal>
    <!-- also used for war file name -->
    <finalName>${mvn.megx.war.file.name}</finalName>

    <plugins>
      <plugin>
        <groupId>com.github.goldin</groupId>
        <artifactId>copy-maven-plugin</artifactId>
        <executions>
          <execution>
            <id>copy-setup.kson-to-workdir</id>
            <phase>process-resources</phase>
            <goals>
              <goal>copy</goal>
            </goals>
            <configuration>
              <skipIdentical>true</skipIdentical>
              <resources>
                <resource>
                  <targetPath>${mvn.work.dir.path}/config</targetPath>
                  <file>${plugin.config.dir}/setup.kson</file>
                </resource>
              </resources>
            </configuration>
          </execution>
        </executions>
      </plugin>


      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-enforcer-plugin</artifactId>
        <configuration>
          <rules combine.children="append">
            <requireFilesExist
                combine.children="append">
              <message>File must exist in correct version
              for succesful lauch</message>
              <files>
                <file>${mvn.work.dir.path}</file>
                <file>${mvn.work.dir.path}/repository</file>
                <file>${mvn.work.dir.path}/plugins</file>
                <file>${mvn.work.dir.path}/config</file>
                <file>${mvn.work.dir.path}/config/setup.kson</file>
                <!-- This is just an indicator if Chon plugins
                     were build from net.megx.product -->
                <file>${mvn.work.dir.path}/plugins/org.chon.cms.core_1.0.0.jar</file>
              </files>
            </requireFilesExist>
            <requireProperty>
              <property>mvn.host.name</property>
              <message><![CDATA[Missing: Hostname under which the webapp will be published e.g. localhost]]></message>
              <regex>.*$</regex>
            </requireProperty>
            <requireProperty>
              <property>mvn.host.port</property>
              <message><![CDATA[Missing: Host port under which the web application will be published e.g. localhost]]></message>
              <regex>.*$</regex>
            </requireProperty>
            <requireProperty>
              <property>mvn.tomcat.home</property>
              <message><![CDATA[Missing: The directory of tomcat installation.]]>
              </message>
            </requireProperty>
            <requireProperty>
              <property>mvn.tomcat.port</property>
              <message><![CDATA[Missing: The port tomcat is listening to]]>
              </message>
            </requireProperty>
          </rules>
        </configuration>
        <!-- standard war lifecycle does not have validate phase -->
        <executions>
          <execution>
            <id>enforce-work-dir</id>
            <phase>pre-integration-test</phase>
            <goals>
              <goal>enforce</goal>
            </goals>
          </execution>
        </executions>
      </plugin>

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-antrun-plugin</artifactId>
        <executions>
          <execution>
            <id>copy-chon-plugins</id>
            <phase>pre-integration-test</phase>
            <goals>
              <goal>run</goal>
            </goals>
            <configuration combine.self="override">
              <tasks>
                <echoproperties />
              </tasks>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-war-plugin</artifactId>
        <version>2.3</version>
        <configuration>
          <!-- filters web.xml -->
          <filteringDeploymentDescriptors>true</filteringDeploymentDescriptors>
          <webResources>
            <resource>
              <!-- this is relative to the pom.xml directory -->
              <directory>properties</directory>
              <filtering>true</filtering>
              <targetPath>WEB-INF</targetPath>
              <includes>
                <include>*.properties</include>
              </includes>
            </resource>
          </webResources>
        </configuration>
      </plugin>

      <plugin>
        <groupId>org.codehaus.cargo</groupId>
        <artifactId>cargo-maven2-plugin</artifactId>
        <version>1.1.3</version>
        <configuration>
          <container>
            <containerId>${mvn.cargo.container.id}</containerId>
            <!-- Location of container installation: basically
                 CATALINA.HOME -->
            <home>${mvn.tomcat.home}</home>
            <timeout>300000</timeout>
            <log>${mvn.work.dir.path}/container.log</log>
          </container>
          <configuration>
            <!-- container configuration -->
            <type>existing</type>
            <!-- For standalone configuration this is the location
                 where Cargo
                 will create the configuration and for existing
                 configuration this is where
                 it is located -->
            <home>${mvn.tomcat.home}</home>

            <properties>
              <cargo.servlet.port>${mvn.tomcat.port}</cargo.servlet.port>
            </properties>
            <deployables>
              <deployable>
                <groupId>${project.groupId}</groupId>
                <artifactId>${project.artifactId}</artifactId>
                <type>war</type>
              </deployable>
            </deployables>
          </configuration>
        </configuration>

        <executions>
          <execution>
            <id>run-server</id>
            <phase>pre-integration-test</phase>
            <goals>
              <goal>redeploy</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
    </plugins>
  </build>

</project>

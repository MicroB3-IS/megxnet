/**
 * ProX - v0.4.5 - 2013-03-29
 * Copyright (c) 2013 Max-Planck-Institut Bremen
 */ (function (e) {
    var t = t || {};
    t.id = {
        standard: "en",
        en: "en_US",
        de: "de_DE"
    }, t.en_US = {
        version: "0.4",
        general: {
            color: "Color",
            label: "Label",
            node: "Node"
        },
        options: {
            data: {
                title: "Data",
                empty: "Click on a vertex to see additional information."
            },
            pfam: {
                title: "Pfam",
                empty: "Click on a vertex to query the Pfam database (pfam.sanger.ac.uk).",
                noresult: "No result."
            },
            ego: {
                title: "Ego Network",
                depth: "Depth",
                directionIgnore: "Ignore edge direction",
                applyLayout: "Apply a new layout to the network",
                select: "Please choose a vertex.",
                selected: "Selected",
                none: "none",
                add: "Add",
                clear: "Clear",
                submit: "Calculate",
                relayout: "Run Layout",
                lessthan: "if less than 100 nodes"
            },
            history: {
                back: "back",
                focusHistory: "Focus History",
                forward: "forward"
            },
            search: {
                term: "Search term",
                caption: "Search",
                noresult: "No search results found.",
                more: "[more results than displayed]"
            },
            log: {
                title: "Log",
                pfamQuery: "Pfam query",
                egoNetwork: "Ego network",
                ofDepth: "of depth",
                directionIgnored: "direction ignored",
                forNodes: "for"
            },
            language: {
                title: "Language",
                english: "English",
                german: "Deutsch"
            }
        }
    }, t.de_DE = {
        version: "0.4",
        general: {
            color: "Farbe",
            label: "Beschriftung",
            node: "Knoten"
        },
        options: {
            data: {
                title: "Daten",
                empty: "Klicken Sie auf einen Knoten um weitere Informationen zu erhalten."
            },
            pfam: {
                title: "Pfam",
                empty: "Klicken Sie auf einen Knoten um die Pfam Datenbank abzufragen (pfam.sanger.ac.uk).",
                noresult: "Kein Ergebnis."
            },
            ego: {
                title: "Ego Netzwerk",
                depth: "Tiefe",
                directionIgnore: "Ignoriere Kantenrichtung",
                applyLayout: "Ein neues Layout anwenden",
                select: "Bitte einen Knoten wählen.",
                selected: "Ausgewählt",
                none: "nichts",
                add: "Hinzu",
                clear: "Leeren",
                submit: "Berechnen",
                relayout: "Layout anwenden",
                lessthan: "bei weniger als 100 Knoten"
            },
            history: {
                back: "zurück",
                focusHistory: "Fokus Verlauf",
                forward: "vorwärts"
            },
            search: {
                term: "Suchbegriff",
                caption: "Suche",
                noresult: "Keine Suchergebnisse gefunden.",
                more: "[mehr Ergebnisse als angezeigt]"
            },
            log: {
                title: "Protokoll",
                pfamQuery: "Pfam Abfrage",
                egoNetwork: "Ego Netzwerk",
                ofDepth: "der Tiefe",
                directionIgnored: "Richtung ignoriert",
                forNodes: "für"
            },
            language: {
                title: "Sprache"
            }
        }
    };
    var i = Backbone.Router.extend({
        routes: {
            "": "onHome",
            ":locale": "onLocale"
        },
        onHome: function () {
            this.navigate(this.proxModel.get("locale"))
        },
        onLocale: function (e) {
            var n = t.id[e];
            n ? (this.proxModel.set({
                locale: n
            }), this.eventAggregator.trigger(i.EVENT_LOCALE, n)) : this.navigate(t.id.standard, {
                trigger: !0
            })
        }
    }, {
        EVENT_LOCALE: "LanguageRouter.EVENT_LOCALE"
    }),
        n = Backbone.Model.extend({
            defaults: {
                locale: t.id[t.id.standard],
                focusHistorySize: 1e3,
                focusHistoryPointer: -1,
                focusHistory: []
            },
            initialize: function () {
                _.bindAll(this, "translate", "addFocus", "focusBack", "focusForward")
            },
            translate: function () {
                return t[this.get("locale")]
            },
            addFocus: function (e) {
                var t = this.get("focusHistoryPointer"),
                    i = this.get("focusHistory");
                i[t] !== e && (t !== i.length - 1 && (i = i.slice(0, t + 1)), i.push(e), i.length > this.get("focusHistorySize") && i.shift(), this.set({
                    focusHistory: i
                }), this.set({
                    focusHistoryPointer: i.length - 1
                }))
            },
            focusBack: function () {
                var e = this.get("focusHistoryPointer"),
                    t = this.get("focusHistory");
                return e > 0 && this.set({
                    focusHistoryPointer: --e
                }), t[e]
            },
            focusForward: function () {
                var e = this.get("focusHistoryPointer"),
                    t = this.get("focusHistory");
                return t.length - 1 > e && this.set({
                    focusHistoryPointer: ++e
                }), t[e]
            },
            getCurrentFocus: function () {
                var e = this.get("focusHistoryPointer"),
                    t = this.get("focusHistory");
                return t[e]
            },
            isFocusPointerMax: function () {
                var e = this.get("focusHistoryPointer"),
                    t = this.get("focusHistory");
                return e >= t.length - 1
            },
            resetFocus: function () {
                this.set({
                    focusHistory: [],
                    focusHistoryPointer: -1
                })
            }
        }),
        o = Backbone.View.extend({
            el: "#history",
            initialize: function () {
                _.bindAll(this, "updateLocale", "pointerChange", "reset"), this.eventAggregator.bind(g.EVENT_LOAD, this.reset), this.proxModel.bind("change:focusHistoryPointer", this.pointerChange)
            },
            render: function () {
                var e = this;
                this.$("button#focus-back").button({
                    icons: {
                        primary: "ui-icon-circle-arrow-w"
                    },
                    disabled: !0
                }).click(function (t) {
                    t.preventDefault(), grax.focus(e.proxModel.focusBack())
                }), this.$("button#focus-forward").button({
                    icons: {
                        secondary: "ui-icon-circle-arrow-e"
                    },
                    disabled: !0
                }).click(function (t) {
                    t.preventDefault(), grax.focus(e.proxModel.focusForward())
                })
            },
            pointerChange: function () {
                var e = this.proxModel.get("focusHistoryPointer");
                this.proxModel.get("focusHistorySize"), this.proxModel.isFocusPointerMax() ? this.$("button#focus-forward").button("option", "disabled", !0) : this.$("button#focus-forward").button("option", "disabled", !1), 0 >= e ? this.$("button#focus-back").button("option", "disabled", !0) : this.$("button#focus-back").button("option", "disabled", !1)
            },
            reset: function () {
                this.proxModel.resetFocus()
            }
        }),
        r = Backbone.View.extend({
            el: "#search",
            initialize: function () {
                _.bindAll(this, "reset"), this.eventAggregator.bind(g.EVENT_LOAD, this.reset), this.parent = this.options.parent, this.$queryInput = this.$("input#search-term"), this.$resultList = this.$("select#search-results").hide(), this.$noResult = this.$("#search-noresult").hide()
            },
            render: function () {
                var e = this;
                this.$("button#search-submit").button({
                    icons: {
                        primary: "ui-icon-search"
                    },
                    text: !1
                }).click(function (t) {
                    t.preventDefault(), e.findNodes()
                }), this.$queryInput.keyup(function (t) {
                    13 === t.which ? (t.preventDefault(), e.findNodes()) : e.reset()
                }).focus(this.reset), this.$resultList.change(function () {
                    var t = e.$resultList.children("option:selected:first").val();
                    e.proxModel.addFocus(t), grax.focus(t, !0)
                })
            },
            reset: function () {
                this.$resultList.empty().hide(), this.$noResult.hide(), this.parent.updateHeight()
            },
            findNodes: function () {
                var e = this,
                    t = grax.find(this.$queryInput.val());
                t && (t.data.length > 0 ? (this.$resultList.empty(), $.each(t.data, function (t, i) {
                    var n, o, r, s;
                    for (s = i.label && i.label.length > 0 ? i.label : "No label", r = i.hits.length > 1 ? s + " (" + i.hits.length + ") (" : s + " (", n = 0, o = i.hits.length; o > n; n++) r += i.hits[n], r += o - 1 > n ? ", " : ")";
                    e.$resultList.append($("<option></option>").val(i.id).text(r))
                }), t.limit > 0 && this.$resultList.append($("<option></option>").text(this.proxModel.translate().options.search.more)), this.$resultList.show()) : this.$noResult.show(), this.parent.updateHeight())
            }
        }),
        s = Backbone.View.extend({
            el: "#data-info",
            initialize: function () {
                _.bindAll(this, "onSelect", "reset", "updateLocale"), this.eventAggregator.bind(g.EVENT_LOAD, this.reset), this.eventAggregator.bind(h.EVENT_SELECT, this.onSelect)
            },
            render: function () {},
            onSelect: function (e, t, i) {
                var n, o, r, s, a, l = [],
                    c = $("<table></table>");
                s = {
                    color: !0,
                    label: !0,
                    gxpartition: !0,
                    x: !0,
                    y: !0,
                    z: !0,
                    r: !0,
                    g: !0,
                    b: !0,
                    edges: !0
                }, a = "rgb(" + 255 * e.r + "," + 255 * e.g + "," + 255 * e.b + ")", c.append(this.createRow(this.proxModel.translate().general.node, $("<div></div>").append($("<div></div>").addClass("colorBox").css("background-color", a).attr("alt", a).attr("title", a)).append(this.createFocusLink(e.id, e.label)), !0));
                for (r in e.attributes) e.attributes.hasOwnProperty(r) && s[r] !== !0 && l.push(r);
                for (l.sort(function (e, t) {
                    return e.toUpperCase().localeCompare(t.toUpperCase())
                }), n = 0, o = l.length; o > n; n++) r = l[n], c.append(this.createRow(r, e.attributes[r]));
                t.length > 0 && c.append(this.createNodeList("in", t)), i.length > 0 && c.append(this.createNodeList("out", i)), this.$el.html(c)
            },
            createRow: function (e, t, i) {
                var n = $("<tr></tr>");
                return n.append($("<td></td>").addClass("title").text(e)), i ? n.append($("<td></td>").html(t)) : n.append($("<td></td>").text(t)), n
            },
            createNodeList: function (e, t) {
                var i, n, o, r = $("<ul></ul>").addClass("linkList");
                for (i = 0, n = t.length; n > i; i++) o = t[i], r.append($("<li></li>").append(this.createFocusLink(o.id, o.label)));
                return this.createRow(e, r, !0)
            },
            createFocusLink: function (e, t) {
                var i, n, o = this;
                return n = function (e) {
                    var t;
                    e.preventDefault(), e.target.hash.length > 1 && (t = e.target.hash.substr(1), o.proxModel.addFocus(t), grax.focus(t, !0))
                }, i = $("<a></a>").attr("href", "#" + e).text(t).click(n)
            },
            reset: function () {
                this.$el.empty()
            }
        }),
        a = Backbone.View.extend({
            el: "#pfam",
            initialize: function () {
                _.bindAll(this, "onSelect", "queryXml", "queryHtml"), this.proxy = this.options.ajaxProxy, this.pfamBase = "http://pfam.sanger.ac.uk/family/", this.eventAggregator.bind(h.EVENT_SELECT, this.onSelect)
            },
            render: function () {},
            onSelect: function (e) {
                var t, i, n;
                this.$el.hasClass("ui-accordion-content-active") && (this.$("#pfam-description").removeClass("i18n-options-pfam-noresult"), this.$("span").remove(), this.$("#pfam-description").empty(), this.$("#pfam-literature").empty(), t = e.label && e.label.length > 0 ? _.escape(e.label) : _.escape(e.id), n = this.proxModel.translate().options.log, i = n.pfamQuery + " " + n.forNodes + " " + t, this.eventAggregator.trigger(c.EVENT_LOG, i), this.queryXml(t))
            },
            queryXml: function (e) {
                var t = this;
                $.ajax({
                    dataType: "xml",
                    url: this.proxy + e,
                    success: function (i) {
                        var n = $(i),
                            o = n.find("description").text(),
                            r = n.find("comment").text(),
                            s = $("<a></a>").attr("href", t.pfamBase + e).attr("target", "_blank").addClass("titleLink").text(e);
                        o.length > 0 || r.length > 0 ? (t.$("#pfam-description").html($("<p></p>").html(s).append(o)).append($("<p></p>").html(r)), t.queryHtml(e)) : (t.$("#pfam-description").addClass("i18n-options-pfam-noresult"), t.updateLocale())
                    },
                    error: function () {
                        t.$("#pfam-description").text("Error querying web service for XML.")
                    }
                })
            },
            queryHtml: function (e) {
                var t = this;
                $.ajax({
                    dataType: "html",
                    url: this.proxy + e,
                    success: function (e) {
                        e.replace(/<\s*img.*?>/, ""), $(e).find("a[name^='ref']").parent("p").each(function (e, t) {
                            var i = $(t);
                            i.children("a").attr("target", "_blank"), $("#pfam-literature").append(i)
                        })
                    },
                    error: function () {
                        t.$("#pfam-literature").text("Error querying web service for HTML.")
                    }
                })
            }
        }),
        l = Backbone.View.extend({
            el: "#ego",
            initialize: function () {
                _.bindAll(this, "reset", "onSelect", "updateLocale"), this.eventAggregator.bind(h.EVENT_SELECT, this.onSelect)
            },
            render: function () {
                var e = this;
                this.$("button#ego-add").button({
                    icons: {
                        primary: "ui-icon-plus"
                    },
                    text: !1
                }).click(function () {
                    e.$("button#ego-add").button("option", "disabled", !0), e.$("#ego-info").removeClass().addClass("i18n-options-ego-select"), e.updateLocale()
                }), this.$("button#ego-submit").button({
                    disabled: !0
                }).click(function () {
                    var t, i, n, o, r = [],
                        s = [];
                    e.$("select#ego-list option").each(function (e, t) {
                        r.push($(t).val()), s.push($(t).text())
                    }), n = e.$("input#ego-depth-spinner").spinner("value"), o = e.$("input#ego-direction-ignore").is(":checked"), grax.ego(n, o, e.$("input#ego-layout").is(":checked"), r), e.reset(), i = e.proxModel.translate().options.log, t = i.egoNetwork + " " + i.ofDepth + " " + n + " " + i.forNodes + " ", t += s.join(", "), o && (t += "; " + i.directionIgnored), e.eventAggregator.trigger(c.EVENT_LOG, t), e.eventAggregator.trigger(g.EVENT_LOAD)
                }), this.$("button#ego-clear").button({
                    disabled: !0
                }).click(this.reset), this.$("button#ego-relayout").button().click(function () {
                    grax.layout(4e3)
                }), this.$("input#ego-depth-spinner").spinner({
                    min: 0,
                    incremental: !1
                })
            },
            reset: function () {
                this.$("button#ego-submit").button("option", "disabled", !0), this.$("button#ego-clear").button("option", "disabled", !0), this.$("#ego-info").empty(), this.$("select#ego-list").empty(), this.$("button#ego-add").button("option", "disabled", !1)
            },
            onSelect: function (e) {
                var t;
                t = e.label && e.label.length > 0 ? _.escape(e.label) : _.escape(e.id), this.$("button#ego-add").button("option", "disabled") === !0 && (this.$("#ego-info").empty(), this.$("button#ego-add").button("option", "disabled", !1), 0 === this.$("select#ego-list option[value=" + e.id + "]").length && this.$("select#ego-list").append($("<option></option>").val(e.id).text(t)), this.$("button#ego-submit").button("option", "disabled", !1), this.$("button#ego-clear").button("option", "disabled", !1))
            }
        }),
        c = Backbone.View.extend({
            el: "#log",
            initialize: function () {
                _.bindAll(this, "onLog"), this.eventAggregator.bind(c.EVENT_LOG, this.onLog)
            },
            render: function () {},
            onLog: function (e) {
                var t, i, n = new Date;
                t = $("<p></p>").addClass("time").text(this.twoDigits(n.getHours()) + ":" + this.twoDigits(n.getMinutes()) + ":" + this.twoDigits(n.getSeconds())), i = $("<p></p>").addClass("message").text(e), this.$el.prepend($("<div></div>").addClass("entry").append(t).append(i))
            },
            twoDigits: function (e) {
                return e > 9 ? "" + e : "0" + e
            }
        }, {
            EVENT_LOG: "LogView.EVENT_LOG"
        }),
        u = Backbone.View.extend({
            el: "#language",
            initialize: function () {},
            render: function () {}
        }),
        d = Backbone.View.extend({
            el: "#options",
            initialize: function () {
                _.bindAll(this, "updateHeight", "updateLocale"), this.eventAggregator.bind(g.EVENT_RESIZE, this.updateHeight), this.eventAggregator.bind(i.EVENT_LOCALE, this.updateLocale), this.historyView = new o({
                    parent: this
                }), this.searchView = new r({
                    parent: this
                }), this.dataView = new s({
                    parent: this
                }), this.pfamView = new a({
                    parent: this,
                    ajaxProxy: this.options.ajaxProxy
                }), this.egoView = new l({
                    parent: this
                }), this.logView = new c({
                    parent: this
                }), this.languageView = new u({
                    parent: this
                })
            },
            render: function () {
                this.historyView.render(), this.searchView.render(), this.dataView.render(), this.pfamView.render(), this.egoView.render(), this.logView.render(), this.languageView.render(), this.$(".menu").accordion({
                    heightStyle: "fill",
                    animate: 200
                })
            },
            updateHeight: function () {
                this.$(".menu").accordion("refresh")
            }
        }),
        h = Backbone.View.extend({
            el: "#content",
            initialize: function () {
                _.bindAll(this, "updateLocale"), _.bindAll(this, "updateHeight"), this.eventAggregator.bind(i.EVENT_LOCALE, this.updateLocale), this.eventAggregator.bind(g.EVENT_RESIZE, this.updateHeight), this.$("div.loading").show()
            },
            events: {
                "dragover canvas:first": "dragOver",
                "dragenter canvas:first": "dragEnter",
                "dragleave canvas:first": "dragLeave",
                "drop canvas:first": "drop"
            },
            render: function () {
                var e;
                e = this, this.updateHeight(), grax.init({
                    container: this.$("#graph"),
                    onSelect: function (t, i, n) {
                        e.eventAggregator.trigger(h.EVENT_SELECT, t, i, n)
                    }
                }), grax.load(this.options.filename, function () {
                    e.$("div.loading").hide()
                })
            },
            dragOver: function (e) {
                return e.preventDefault && e.preventDefault(), !1
            },
            dragEnter: function () {
                return !1
            },
            dragLeave: function () {},
            drop: function (e) {
                e.stopPropagation && e.stopPropagation();
                var t = e.originalEvent.dataTransfer.files[0],
                    i = t.name.split(".").pop();
                return "graphml" === i ? grax.load(t) : console.log("Only GRAPHML files are allowed, yet."), !1
            },
            updateHeight: function () {
                var e = this.$("#graph"),
                    t = $(window).height();
                e.css("height", Math.max(1, t) + "px"), grax.fit()
            }
        }, {
            EVENT_SELECT: "ContentView.EVENT_SELECT"
        }),
        g = Backbone.View.extend({
            el: "body",
            initialize: function () {
                _.bindAll(this, "onResize"), this.optionsView = new d({
                    ajaxProxy: this.options.config.ajaxProxy
                }), this.contentView = new h({
                    filename: this.options.config.filename
                }), $(window).on("resize.Prox", this.onResize)
            },
            render: function () {
                this.options.languageRouter.navigate(t.id.standard, {
                    trigger: !0
                }), this.optionsView.render(), this.contentView.render()
            },
            events: {
                click: "onClick"
            },
            onResize: function () {
                this.eventAggregator.trigger(g.EVENT_RESIZE)
            },
            onClick: function () {
                this.eventAggregator.trigger(g.EVENT_CLICK)
            },
            remove: function () {
                $(window).off("resize.Prox"), Backbone.View.prototype.remove.call(this)
            }
        }, {
            EVENT_RESIZE: "ProxView.EVENT_RESIZE",
            EVENT_CLICK: "ProxView.EVENT_CLICK",
            EVENT_LOAD: "ProxView.EVENT_LOAD"
        });
    e.init = function (e) {
        e = $.extend({
            file: "demo.graphml",
            ajaxProxy: ""
        }, e), Backbone.View.prototype.updateLocale = function (e) {
            e = e || this.proxModel.get("locale");
            var i = $.extend(!0, {}, t[t.id[t.id.standard]], t[e]);
            this.$('[class|="i18n"]').each(function (e, t) {
                for (var n = $(t), o = n.attr("class").split(" "), r = null, s = null, a = null, l = i; null === s && o.length > 0;) r = o.pop(), "i18n-" === r.substr(0, 5) && (s = r.split("-"), s.shift());
                do a = s.shift(), l = l[a]; while (s.length > 0 && "object" == typeof l);
                "string" != typeof l && (l = "N/A"), n.text(l)
            })
        };
        var o = _.extend({}, Backbone.Events);
        Backbone.View.prototype.eventAggregator = o, Backbone.Router.prototype.eventAggregator = o, this.proxModel = new n, Backbone.View.prototype.proxModel = this.proxModel, Backbone.Router.prototype.proxModel = this.proxModel, this.languageRouter = new i, this.proxView = new g({
            config: e,
            languageRouter: this.languageRouter
        }), Backbone.history.start(), this.proxView.render()
    }
})(window.prox = window.prox || {});